// Code generated by protoc-gen-go. DO NOT EDIT.
// source: poker/poker_service.proto

package poker

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Input struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Input) Reset()         { *m = Input{} }
func (m *Input) String() string { return proto.CompactTextString(m) }
func (*Input) ProtoMessage()    {}
func (*Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_d86105198630566d, []int{0}
}

func (m *Input) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Input.Unmarshal(m, b)
}
func (m *Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Input.Marshal(b, m, deterministic)
}
func (m *Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Input.Merge(m, src)
}
func (m *Input) XXX_Size() int {
	return xxx_messageInfo_Input.Size(m)
}
func (m *Input) XXX_DiscardUnknown() {
	xxx_messageInfo_Input.DiscardUnknown(m)
}

var xxx_messageInfo_Input proto.InternalMessageInfo

type Event struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_d86105198630566d, []int{1}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Input)(nil), "poker.Input")
	proto.RegisterType((*Event)(nil), "poker.Event")
}

func init() { proto.RegisterFile("poker/poker_service.proto", fileDescriptor_d86105198630566d) }

var fileDescriptor_d86105198630566d = []byte{
	// 145 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2c, 0xc8, 0xcf, 0x4e,
	0x2d, 0xd2, 0x07, 0x93, 0xf1, 0xc5, 0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x7a, 0x05, 0x45, 0xf9,
	0x25, 0xf9, 0x42, 0xac, 0x60, 0x41, 0x25, 0x76, 0x2e, 0x56, 0xcf, 0xbc, 0x82, 0xd2, 0x12, 0x10,
	0xc3, 0xb5, 0x2c, 0x35, 0xaf, 0xc4, 0xc8, 0x9a, 0x8b, 0x27, 0x00, 0x24, 0x15, 0x0c, 0x51, 0x2e,
	0xa4, 0xcd, 0xc5, 0xee, 0x9c, 0x9f, 0x97, 0x97, 0x9a, 0x5c, 0x22, 0xc4, 0xa3, 0x07, 0xd6, 0xa4,
	0x07, 0xd6, 0x21, 0x05, 0xe3, 0x81, 0xb5, 0x29, 0x31, 0x68, 0x30, 0x1a, 0x30, 0x3a, 0x69, 0x47,
	0x69, 0xa6, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0x87, 0x64, 0x66, 0xe6,
	0x95, 0x16, 0xa7, 0xe6, 0xe9, 0x43, 0x9d, 0x91, 0x9d, 0xae, 0x0f, 0xb6, 0x1c, 0xc2, 0x4f, 0x62,
	0x03, 0x73, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x1d, 0x2c, 0xf5, 0xa6, 0x00, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PokerServiceClient is the client API for PokerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PokerServiceClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (PokerService_ConnectClient, error)
}

type pokerServiceClient struct {
	cc *grpc.ClientConn
}

func NewPokerServiceClient(cc *grpc.ClientConn) PokerServiceClient {
	return &pokerServiceClient{cc}
}

func (c *pokerServiceClient) Connect(ctx context.Context, opts ...grpc.CallOption) (PokerService_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PokerService_serviceDesc.Streams[0], "/poker.PokerService/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &pokerServiceConnectClient{stream}
	return x, nil
}

type PokerService_ConnectClient interface {
	Send(*Input) error
	Recv() (*Event, error)
	grpc.ClientStream
}

type pokerServiceConnectClient struct {
	grpc.ClientStream
}

func (x *pokerServiceConnectClient) Send(m *Input) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pokerServiceConnectClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PokerServiceServer is the server API for PokerService service.
type PokerServiceServer interface {
	Connect(PokerService_ConnectServer) error
}

// UnimplementedPokerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPokerServiceServer struct {
}

func (*UnimplementedPokerServiceServer) Connect(srv PokerService_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}

func RegisterPokerServiceServer(s *grpc.Server, srv PokerServiceServer) {
	s.RegisterService(&_PokerService_serviceDesc, srv)
}

func _PokerService_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PokerServiceServer).Connect(&pokerServiceConnectServer{stream})
}

type PokerService_ConnectServer interface {
	Send(*Event) error
	Recv() (*Input, error)
	grpc.ServerStream
}

type pokerServiceConnectServer struct {
	grpc.ServerStream
}

func (x *pokerServiceConnectServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pokerServiceConnectServer) Recv() (*Input, error) {
	m := new(Input)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PokerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "poker.PokerService",
	HandlerType: (*PokerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _PokerService_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "poker/poker_service.proto",
}
